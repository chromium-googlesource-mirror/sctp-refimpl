FreeBSD* Driver for Intel® Network Connection
=============================================

March 3, 2007


Contents
========

- Overview
- Identifying Your Adapter
- Building and Installation
- Speed and Duplex Configuration
- Additional Configurations
- Known Limitations
- Support
- License


Overview
========

This file describes the FreeBSD* driver for Intel® Network Connection. 
This driver has been developed for use with FreeBSD, Release 7.x.

For questions related to hardware requirements, refer to the documentation 
supplied with your Gigabit adapter. All hardware requirements listed 
apply to use with FreeBSD.


Identifying Your Adapter
========================

For information on how to identify your adapter, go to the Adapter & 
Driver ID Guide at: 

http://support.intel.com/support/go/network/adapter/proidguide.htm


For the latest Intel network drivers for FreeBSD, see: 

http://downloadcenter.intel.com/scripts-df-external/Support_Intel.aspx


NOTE: Mobile adapters are not fully supported.


Building and Installation
=========================

NOTE: The driver can be installed as a dynamic loadable kernel module or 
      compiled into the kernel. You must have kernel sources installed in 
      order to compile the driver module.

In the instructions below, x.x.x is the driver version as indicated in the 
name of the driver tar file.

1. Move the base driver tar file to the directory of your choice. For 
   example, use /home/username/igb or /usr/local/src/igb.

2. Untar/unzip the archive:

        tar xzvf igb-x.x.x.tar.gz

   This will create an igb-x.x.x directory.

3. To create a loadable module, perform the following steps. 
   NOTE: To compile the driver into the kernel, go directly to step 4.

	a. To compile the module

	          cd igb-x.x.x
      	          make

   	b. To install the compiled module to the system directory:
	 
		  make install
		
   	c. If you want the driver to load automatically when the system is booted:

	      1. Edit /boot/loader.conf, and add the following line:

      	          if_igb_load="YES"

4. To compile the driver into the kernel, enter: 
    
	cd igb-x.x.x/src
    	cp *.[ch] /usr/src/sys/dev/igb 

	Edit the kernel configuration file (i.e., GENERIC or MYKERNEL) in
   	/usr/src/sys/i386/conf, and ensure the following line is present:
        
	device igb

	Compile and install the kernel. The system must be rebooted for the 
        kernel updates to take effect. For additional information on compiling 
        the kernel, consult the FreeBSD operating system documentation. 

5. To assign an IP address to the interface, enter the following:

        ifconfig igbX <IP_address>

6. Verify that the interface works. Enter the following, where <IP_address>
   is the IP address for another machine on the same subnet as the interface
   that is being tested:

        ping <IP_address>

7. To configure the IP address to remain after reboot, edit /etc/rc.conf, 
   and create the appropriate ifconfig_igb<interface_num> entry:

        ifconfig_igb<interface_num>="<ifconfig_settings>"

   Example usage:

        ifconfig_igb0="inet 192.168.10.1 netmask 255.255.255.0"

   NOTE: For assistance, see the ifconfig man page.


Speed and Duplex Configuration
==============================

By default, the adapter auto-negotiates the speed and duplex of the 
connection. If there is a specific need, the ifconfig utility can be used to 
configure the speed and duplex settings on the adapter. Example usage:

        ifconfig igbX <IP_address> media 100baseTX mediaopt 
            full-duplex

   NOTE: Only use mediaopt to set the driver to full-duplex. If mediaopt is 
         not specified and you are not running at gigabit speed, the driver 
         defaults to half-duplex.

If the interface is currently forced to 100 full duplex, in order to change
to half duplex you must use this command:

    	ifconfig igbX <IP_address> media 100baseTX -mediaopt 
	    full-duplex 


This driver supports the following media type options:

   autoselect      -  Enables auto-negotiation for speed and duplex.

   10baseT/UTP     -  Sets speed to 10 Mbps. Use the ifconfig mediaopt 
                      option to select full-duplex mode.

   100baseTX       -  Sets speed to 100 Mbps. Use the ifconfig mediaopt
                      option to select full-duplex mode.

   1000baseTX      -  Sets speed to 1000 Mbps. In this case, the driver
                      supports only full-duplex mode.

   1000baseSX      -  Sets speed to 1000 Mbps. In this case, the driver
                      supports only full-duplex mode.

For more information on the ifconfig utility, see the ifconfig man page.


Additional Configurations
=========================

The driver supports Transmit/Receive Checksum Offload and Jumbo Frames.

  Jumbo Frames
  ------------
  To enable Jumbo Frames, use the ifconfig utility to set the Maximum 
  Transport Unit (MTU) frame size above its default of 1500 bytes. 

  The Jumbo Frames MTU range for Intel Adapters is 1500 to 9216. To modify 
  the setting, enter the following:

        ifconfig igbX <hostname or IP address> mtu 9000

  To confirm the MTU used between two specific devices, use:

        route get <destination_IP_address>

  Notes: 

  - Only enable Jumbo Frames if your network infrastructure supports them.

  - To enable Jumbo Frames, increase the MTU size on the interface beyond 
    1500.

  - The Jumbo Frames setting on the switch must be set to at least 22 bytes 
    larger than that of the MTU.

  - The maximum MTU setting for Jumbo Frames is 9216.  This value coincides
    with the maximum Jumbo Frames size of 9234 bytes.

  - Using Jumbo Frames at 10 or 100 Mbps may result in poor performance or 
    loss of link.  

  VLANs
  -----
  To create a new VLAN interface:

        ifconfig <vlan_name> create

  To associate the VLAN interface with a physical interface and 
  assign a VLAN ID, IP address, and netmask:

        ifconfig <vlan_name> <ip_address> netmask <subnet_mask> vlan 
           <vlan_id> vlandev <physical_interface>

  Example:

        ifconfig vlan10 10.0.0.1 netmask 255.255.255.0 vlan 10 vlandev igb0

  In this example, all packets will be marked on egress with 802.1Q VLAN 
  tags, specifying a VLAN ID of 10.

  To remove a VLAN interface:

  Intel® Network Connection        ifconfig <vlan_name> destroy


  Polling
  -------
  
  To enable polling in the driver, add the following options to the kernel 
  configuration, and then recompile the kernel:

        options DEVICE_POLLING
        options HZ=1000

  At runtime use: 
        ifconfig igbX polling (to turn polling on)
  and:   
	ifconfig igbX -polling  (to turn it off)


  Checksum Offload
  ----------------
  Checksum offloading supports both TCP and UDP packets and is 
  supported for both transmit and receive. 

  Checksum offloading can be enabled or disabled using ifconfig. 
  Both transmit and receive offloading will be either enabled or 
  disabled together. You cannot enable/disable one without the other.

  To enable checksum offloading:

         ifconfig igbX rxcsum 

  To disable checksum offloading:

         ifconfig igbX -rxcsum 

  To confirm the current setting:

         ifconfig igbX

  Look for the presence or absence of the following line:

         options=3 <RXCSUM,TXCSUM>

  See the ifconfig man page for further information. 


  TSO
  ---
  The FreeBSD driver offers support for TSO (TCP Segmentation Offload).

  You can enable/disable it in two ways/places:

        -  sysctl net.inet.tcp.tso=0	(or 1 to enable it)

  Doing this disables TSO in the stack and will affect all adapters.

        -  ifconfig igbX -tso             

  Doing this will disable TSO only for this adapter.
 
  To enable:

        -  ifconfig igbX tso 

  NOTES: By default only PCI-Express adapters are ENABLED to do TSO. Others 
  can be enabled by the user at their own risk
  TSO is not supported on 82547 and 82544-based adapters, as well as older adapters.

  
Known Limitations
=================
 
  Detected Tx Unit Hang in Quad Port Adapters
  -------------------------------------------

  In some cases ports 3 and 4 won’t pass traffic. Ports 1 and 2 don't show 
  any errors and will pass traffic.

  This issue MAY be resolved by updating to the latest BIOS. You can 
  check your system's BIOS by downloading the Linux Firmware Developer Kit 
  that can be obtained at http://www.linuxfirmwarekit.org/


  There are known performance issues with this driver when running UDP traffic
  with Jumbo Frames. 
  ----------------------------------------------------------------------------


Support
=======

For general information and support, go to the Intel support website at:

        http://support.intel.com

If an issue is identified, support is through email only at:
freebsdnic@mailbox.intel.com


License
=======

This software program is released under the terms of a license agreement 
between you ('Licensee') and Intel. Do not use or load this software or any 
associated materials (collectively, the 'Software') until you have carefully 
read the full terms and conditions of the LICENSE located in this software 
package. By loading or using the Software, you agree to the terms of this 
Agreement. If you do not agree with the terms of this Agreement, do not 
install or use the Software.

* Other names and brands may be claimed as the property of others.
